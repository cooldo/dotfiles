#[ -f  ~/.mybashrc ] && source ~/.mybashrc
# set bash command as vi mode
set -o vi

# set default editor to vi
EDITOR=vi

# package management
alias apti='sudo apt-get install'

# minicom
alias m='sudo minicom -c on -w -C /media/sf_share/log/log-$(date +%Y-%m-%d_%H_%M_%S).log'

# tmux
alias ta='tmux attach'
# clear pane
alias tc='clear; tmux clear-history; clear'

# git
alias gs='git status'
alias gd='git diff'
alias gl='git log'
alias gb='git branch -a'

# change "ls" to "exa"
alias ll='exa -l --color=always --group-directories-first'
alias la='exa -la --color=always --group-directories-first'
alias lm='exa -la --color=always --group-directories-first --sort=modified'
alias lz='exa -la --color=always --group-directories-first --sort=size'

# directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias 3..='cd ../../..'
alias 4..='cd ../../../..'

# misc
alias sg='systemctl -la | grep'
alias pg='ps -aux | grep'
alias c='clear'
alias sp='sudo /bin/bash -c "$(history  | tail -n 2 | head -n 1 | cut -d" " -f3-)"'
alias f='vi $(fzf)'
alias play='nestopia'

# extraction
# usage: ex <file>
ex () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)     tar xjf $1      ;;
            *.tar.gz)      tar xzf $1      ;;
            *.bz2)         bunzip2 $1      ;;
            *.rar)         unrar x $1      ;;
            *.gz)          gunzip  $1      ;;
            *.tar)         tar xf  $1      ;;
            *.zip)         unzip   $1      ;;
            *.deb)         ar -x   $1      ;;
            *.Z)           uncompress $1   ;;
            *.7z)          7z x    $1      ;;
        esac
   fi
}

stty -ixon -ixoff

# new find and grep command
fag () {
    if [ $# -eq 0 ];then
        echo "fag <find value> [directory]"
        return
    fi
    if [ $# -eq 1 ];then
        find . -iname "*$1*" | grep -i "$1";
        return
    fi
    search="$1"
    shift
    find "$@" -iname "*$search*" | grep -i "$search";
}

# get relative date from 0:0:0
rdate () {
    currstamp=$(date +%s)
    # $1 is last timestamps value from command date +%s
    laststamp="$1"
    result=$(("$currstamp"-"$laststamp"))
    date -d @"$result" -u +'%H:%M:%S'
}

mvtotrash () {
    dir=$(date +%Y-%m-%d_%H_%M_%S);
    suffix=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 14);
    mydirname="$dir"_"$suffix";
    mkdir /tmp/"$mydirname";
    mv $@ /tmp/"$mydirname";
}

export -f mvtotrash

# replace $1 to $2
replace ()
{
    find . -type f -exec sed -i s/"$1"/"$2"/g {} \;
}

# generate random password
genpass ()
{
   tr -dc 'a-zA-Z0-9#@.-' < /dev/urandom | head -c ${1:-14}; echo
}

rpmview() {
    rpm2cpio $1 |cpio -ivd
}

bushow()
{
dbus-send --session           \
  --dest=org.freedesktop.DBus \
  --type=method_call          \
  --print-reply               \
  /org/freedesktop/DBus       \
  org.freedesktop.DBus.ListNames
}

# pulseaudio config
pa-list() { pacmd list-sinks | awk '/index/ || /name:/' ;}
pa-set() {
    # list all apps in playback tab (ex: mplayer, vlc)
    inputs=($(pacmd list-sink-inputs | awk '/index/ {print $2}'))
    # set the default output device
    pacmd set-default-sink $1 &> /dev/null
    for i in ${inputs[*]}; do pacmd move-sink-input $i $1 &> /dev/null; done
}
pa-playbacklist() {
    # list individual apps
    echo "=================="
    echo "Running Apps"
    pacmd list-sink-inputs | awk '/index/ || /application.name /'

    # list all sound devices
    echo "=================="
    echo "Running Devices"
    pacmd list-sinks | awk '/index/ || /name:/'
}
pa-playbackset() {
    # set the default output device
    pacmd set-default-sink "$2" &> /dev/null
    # apply change to one running app to use the new output device
    pacmd move-sink-input "$1" "$2" &> /dev/null
}

h () {
   if [ $# -ne 1 ];then
       cat ~/.bash_history  | tac | cat -n | tac
       #cat -n ~/.bash_history
       return
   fi
    grep "$@" -a ~/.bash_history*
}

# base16 color
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

# Func to extend history and print return code
PROMPT_COMMAND=__prompt_command

__prompt_command() {
    local curr_exit="$?"
    local BRed='\[\e[0;91m\]'
    local RCol='\[\e[0m\]'
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS1='\[\033[33m\]\t ${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u:\[\033[01;34m\]\w\[\033[00m\]\$ '
    if [ "$curr_exit" != 0 ]; then
       PS1="[${BRed}$curr_exit${RCol}]$PS1"
    fi
    # save history
    history -a
}

# dark level 1
#base16_pop
# dark level 2
#base16_summerfruit-dark
# dark level 3, blue fg file
#base16_atelier-cave
# dark level 3, yellow fg file
#base16_atelier-heath
# dark level 3, blue fg file
base16_google-dark
# dark level 4
#base16_tube
# light
#base16_google-light
#base16_papercolor-light
#screenfetch
#export http_proxy="socks5://127.0.0.1:1080"
#export https_proxy="socks5://127.0.0.1:1080"
export HISTFILESIZE=400000000
export HISTSIZE=10000
export PATH=/home/gao/Qt/5.5/gcc/bin:$PATH
